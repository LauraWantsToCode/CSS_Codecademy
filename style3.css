/* box model */

/* Introduction to the Box Model
Browsers load HTML elements with default position values. 
This often leads to an unexpected and unwanted user experience while 
limiting the views you can create. In this lesson, you will learn about 
the box model, an important concept to understand how elements are 
positioned and displayed on a website.

If you have used HTML and CSS, you have unknowingly seen aspects of the 
box model. For example, if you have set the background color of an element, 
you may have noticed that the color was applied not only to the area 
directly behind the element but also to the area to the right of the 
element. Also, if you have aligned text, you know it is aligned relative
 to something. What is that something?

All elements on a web page are interpreted by the browser as
 “living” inside of a box. This is what is meant by the box model.

For example, when you change the background color of an element,
 you change the background color of its entire box.

In this lesson, you’ll learn about the following aspects of the box model:

The dimensions of an element’s box.
The borders of an element’s box.
The paddings of an element’s box.
The margins of an element’s box. */

/* 
width
height
padding
border
margin
overflow
 */


/* 
border styles
https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#values 


color
https://developer.mozilla.org/en-US/docs/Web/CSS/color_value 
*/

/* 
padding [ same for margin] 
Set the top and bottom padding of h2 elements to 20 pixels and set 
the left and right padding of h2 elements to 30 pixels.

padding: 20px 30px 20px 30px; 
starts with top, right, bottom, left

if top and bottom are equal, and left and right are equal, can just do: 

 padding: 20px 30px; 

*/


/* 
The margin property also lets you center content. 
set the vertical (top and bottom) margins of the 0 
and the horizontal (left and right) margins to auto.

margin: 0 auto;
*/

/* Margin Collapse
As you have seen, padding is space added inside an element’s border, while margin is 
space added outside an element’s border. One additional 
difference is that top and bottom margins, also called vertical margins, collapse,
while top and bottom padding does not.

Horizontal margins (left and right), like padding, are always displayed and
 added together. For example, if two divs with ids #div-one and #div-two, 
 are next to each other, they will be as far apart as the sum of their adjacent margins. */

/* Minimum and Maximum Height and Width
Because a web page can be viewed through displays of
 differing screen size, the content on the web page can suffer 
 from those changes in size. To avoid this problem, CSS offers two
  properties that can limit how narrow or how wide an element’s box can be sized to:

min-width—this property ensures a minimum width of an element’s box.
max-width—this property ensures a maximum width of an element’s box.
p {
  min-width: 300px;
  max-width: 600px;
} 

You can also limit the minimum and maximum height of an element:

min-height — this property ensures a minimum height for an element’s box.
max-height — this property ensures a maximum height of an element’s box.

*/


/* 

Overflow
All of the components of the box model comprise an element’s size. For example,
an image that has the following dimensions is 364 pixels wide and 244 pixels tall.

The overflow property controls what happens to content that spills, or overflows, outside its box. 
The most commonly used values are:

hidden—when set to this value, any content that overflows will be hidden from view.
scroll—when set to this value, a scrollbar will be added to the element’s box so that 
the rest of the content can be viewed by scrolling.
visible—when set to this value, the overflow content will be displayed outside of the
 containing element. Note, this is the default value.

p {
  overflow: scroll; 
}


For a more in-depth look at overflow, including additional properties like 
overflow-x and overflow-y that separate out the horizontal and vertical values,
 head over to the MDN documentation.
 https://developer.mozilla.org/en-US/docs/Web/CSS/overflow

*/

/* 
All major web browsers have a default stylesheet they use in the absence of an
 external stylesheet. These default stylesheets are known as user agent stylesheets. 
In this case, the term user agent is a technical term for the browser.
*/

/* 
User agent stylesheets often have default CSS rules that set default values
 for padding and margin. This affects how the browser displays HTML elements,
  which can make it difficult for a developer to design or style a web page.

Many developers choose to reset these default values so that they can truly work with a clean slate.

* {
  margin: 0;
  padding: 0;
}
The code in the example above resets the default margin and padding values of all HTML elements.
It is often the first CSS rule in an external stylesheet.

*/

/* 
Visibility
Elements can be hidden from view with the visibility property.

The visibility property can be set to one of the following values:

hidden — hides an element.
visible — displays an element.
collapse — collapses an element.


Keep in mind, however, that users can still view the contents of the list item 
(e.g., Donate) by viewing the source code in their browser. Furthermore, the web
 page will only hide the contents of the element. 
It will still leave an empty space where the element is intended to display.

Note: What’s the difference between display: none and visibility: hidden? 
An element with display: none will be completely removed from the web page. 
An element with visibility: hidden, 
however, will not be visible on the web page, but the space reserved for it will.
*/

/* Box Model: Border-Box
Fortunately, we can reset the entire box model and specify a new one: border-box.

* {
  box-sizing: border-box;
}
The code in the example above resets the box model to border-box for all 
HTML elements. This new box model 
avoids the dimensional issues that exist in the former box model you learned about.

In this box model, the height and width of the box will remain fixed.
 The border thickness and padding will be included inside of the box, 
 which means the overall dimensions of the box do not change. 
 
 border is not included, only content and padding!  
 
 */


body {
    background-color: white;
    font-family: 'Raleway', sans-serif;
  }
  
  .navigation ul {
    margin: 0;
    padding: 0;
    text-align: center;
  }
  
  .navigation li {
    font-weight: 100;
    letter-spacing: 2px;
    padding: 20px;
  }
  
  .navigation  li.logo {
    color: black;
    font-size: 18px;
    font-weight: 700;
    letter-spacing: 4px;
  }
  
  #banner {
    background-image: url("https://content.codecademy.com/courses/web-101/unit-6/htmlcss1-img_tahoe.jpeg");
    background-size: cover;
    background-position: bottom center;
    height: 700px;
    width: 100%;
  }
  
  #banner .content h1 {
    border: 3px solid white;
    position: relative;
    top: 50px;
    width: 400px;
    margin: 0 auto;
  }
  
  #main {
    margin: 0 auto;
    padding: 40px;
    text-align: center;
    width: 400px;
    height: 1000px;
    overflow: scroll;
  }
  
  h1 {
    color: white;
    font-size: 42px;
    font-weight: 600;
    text-align: center;
  }
  
  h2 {
    border: 1px dotted red;
    color: red;
    font-size: 14px;
    line-height: 48px;
    padding: 20px 30px;
    margin: 30px 20px;
    text-align: center;
  }
  
  h3 {
    color: red;
    font-size: 26px;
    font-weight: 700;
    padding: 20px 10px;
  }
  
  p {
    color: grey;
    font-size: 16px;
    line-height: 48px;
    margin-top: 60px;
    padding: 10px 20px;
  }
  
  .pull-quote {
    margin: 0 auto;
    width: 400px;
  }
  
  .byline {
    border-bottom: 1px solid LightGrey;
    border-top: 1px solid LightGrey;
    color: DarkGrey;
    font-size: 14px;
    font-weight: 200;
  }
  
  .share {
    border: 1px solid LightGrey;
    padding: 40px 0px;
    position: relative;
    text-align: center;
    width: 100%;
  }
  
  .share a {
    background: red;
    border: 1px solid red;
    border-radius: 3px;
    color: white;
    display: inline-block;
    margin: 10px;
    padding: 14px;
    text-decoration: none;
  }
  
  .share a:hover {
    background: white;
    border: 1px solid red;
    color: red;
  }