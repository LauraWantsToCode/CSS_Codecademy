/* Flow of HTML
A browser will render the elements of an HTML document that has 
no CSS from left to right, top to bottom, in the same order as they exist in the document. 
This is called the flow of elements in HTML. */

/* 
POSITION OF ELEMENTS

In addition to the properties that it provides to style HTML elements, CSS includes properties that change
 how a browser positions elements. These properties specify where an element is located on a page, 
 if the element can share lines with other elements, and other related attributes.

In this lesson, you will learn five properties for adjusting the position of HTML elements in the browser:

position
display
z-index
float
clear
Each of these properties will allow us to position and view elements on a web
 page. They can be used in conjunction with any other styling properties you may know.

*/

/* The default position of an element can be changed by setting its position property. 
The position property can take one of five values:

static - the default value (it does not need to be specified)
relative
absolute
fixed
sticky */


/* 
Position: Relative
One way to modify the default position of an element is by setting its position property to relative.

This value allows you to position an element relative to its default static position on the web page.

.green-box {
  background-color: green;
  position: relative;
}
Although the code in the example above instructs the browser to expect a relative 
positioning of the .green-box element, it does not specify where the .green-box 
element should be positioned on the page. This is done by accompanying the position 
declaration with one or more of the following offset properties that will move the 
element away from its default static position:

top - moves the element down from the top.
bottom - moves the element up from the bottom.
left - moves the element away from the left side (to the right).
right - moves the element away from the right side (to the left).
You can specify values in pixels, ems, or percentages, among others, to dial 
in exactly how far you need the element to move. It’s also important to note
that offset properties will not work if the element’s position property is the default static.
*/

/* 
Position: Absolute
Another way of modifying the position of an element is by setting its position to absolute.

When an element’s position is set to absolute, all other elements on the page will
 ignore the element and act like it is not present on the page. The element will be 
 positioned relative to its closest positioned parent element, 
while offset properties can be used to determine the final position from there. 
*/

/* 
Position: Fixed
When an element’s position is set to absolute, as in the last exercise, the element will 
scroll with the rest of the document when a user scrolls.

We can fix an element to a specific position on the page (regardless of user scrolling) 
by setting its position to fixed, and accompanying it
 with the familiar offset properties top, bottom, left, and right.
*/

/* 
Position: Sticky
Since static and relative positioned elements stay in the normal flow of the document, 
when a user scrolls the page (or parent element) these elements will scroll too. 
And since fixed and absolute 
positioned elements are removed from the document flow, when a user scrolls, these 
elements will stay at their specified offset position.

The sticky value is another position value that keeps an element in the document 
flow as the user scrolls, but sticks to a specified position as the page is scrolled further. 
This is done by using the sticky value along with the familiar offset properties, as well as one new one.
*/

/* 
.box-bottom {
  background-color: darkgreen;
  position: sticky;
  top: 240px;
}
In the example above, the .box-bottom <div> will remain in its relative 
position, and scroll as usual. When it reaches 240 pixels from the top, 
it will stick to that position until it reaches the bottom of its parent 
container where it will “unstick” and rejoin the flow of the document.
*/

/* 
Z-Index
When boxes on a web page have a combination of different positions, the boxes (and therefore, their content)
 can overlap with each other, making the content difficult to read or consume.

 The z-index property controls how far back or how far forward an element should appear on 
 the web page when elements overlap. This can be thought of as the depth of elements, 
 with deeper elements appearing behind shallower elements.

The z-index property accepts integer values. Depending on their values, the integers 
instruct the browser on the order in which elements should be layered on the web page.

Change position to relative, because the z-index property does not work on static elements. 
*/

/* 

Inline Display
Every HTML element has a default display value that dictates if it can share horizontal 
space with other elements. Some elements fill the entire browser from left to right 
regardless of the size of their content. Other elements only take up as much horizontal
 space as their content requires and can be directly next to other elements.

In this lesson, we’ll cover three values for the display property: inline, block, and inline-block.

The default display for some elements, such as <em>, <strong>, and <a>, is called inline.
Inline elements cannot be altered in size with the height or width CSS properties.

The CSS display property provides the ability to make
 any element an inline element. This includes elements that are not
 inline by default such as paragraphs, divs, and headings.

h1 {
  display: inline;
}

*/


/* 
Display: Block
Some elements are not displayed in the same line as the content around them. 
These are called block-level elements. These elements fill the entire width of the page
 by default, but their width property can also be set. Unless otherwise specified, they 
 are the height necessary to accommodate their content.

Elements that are block-level by default include all levels of heading elements 
(<h1> through <h6>), <p>, <div> and <footer>. */

/* Display: Inline-Block
The third value for the display property is inline-block. Inline-block display 
combines features of both inline and block elements. Inline-block elements can 
appear next to each other and we can specify their dimensions using the width
 and height properties. 
Images are the best example of default inline-block elements. */

/* 
Float
So far, you’ve learned how to specify the exact position of an element using offset properties.
 If you’re simply interested in moving an element as far left or as far right as possible in the 
 container, you can use the float property.

The float property is commonly used for wrapping text around an image. Note, however, that moving
 elements left or right for layout purposes is better suited for tools like CSS grid and flexbox,
  which you’ll learn about later on.

The float property is often set using one of the values below:

left - moves, or floats, elements as far left as possible.
right - moves elements as far right as possible.

 float: left; 

*/


/* 
Clear

The float property can also be used to float multiple elements at once. 
However, when multiple floated elements have different heights, it can
 affect their layout on the page. Specifically, elements can “bump” into 
 each other and not allow other elements to properly move to the left or right.

The clear property specifies how elements should behave when they bump
 into each other on the page. It can take on one of the following values:

left—the left side of the element will not touch any other element within
 the same containing element.
right—the right side of the element will not touch any other element within
 the same containing element.
both—neither side of the element will touch any other element within the 
same containing element.
none—the element can touch either side.


div {
  width: 200px;
  float: left;
}
 
div.special {
  clear: left;
}
In the example above, all <div>s on the page are floated to the left side. 
The element with class special did not move all the way to the left because a 
taller <div> blocked its positioning. By setting its clear property to left, 
the special <div> will be moved all the way to the left side of the page.
*/




body {
    background-color: #FFF;
    margin: 0 auto;
  }
  
  header {
    background-color: #466995;
    border-bottom: 1px solid #466995;
  }
  
  ul {
    margin: 30px auto;
    padding: 0 20px;
    text-align: center;
  }
  
  li {
    color: #FFF;
    font-family: 'Oswald', sans-serif;
    font-size: 16px;
    font-weight: 300;
    text-transform: uppercase;
  }
  
  li:hover {
    color: #DBE9EE;
  }
  
  h1 {
    color: #466995;
    font-family: 'Oswald', sans-serif;
    font-size: 32px;
    font-weight: 300;
    text-transform: uppercase;
  }
  
  h2 {
    color: #333;
    font-family: 'Varela Round', sans-serif;
    font-size: 26px;
    font-weight: 100;
    margin: 0 auto 20px auto;
  }
  
  h3 {
    color: #466995;
    font-family: 'Oswald', sans-serif;
    font-size: 18px;
    text-align: center;
    font-weight: 700;
    text-transform: uppercase;
    padding: 30px;
  }
  
  h4 {
    color: #466995;
    font-family: 'Oswald', sans-serif;
    font-size: 18px;
    font-weight: 300;
    letter-spacing: 2px;
    text-align: center;
    text-transform: uppercase
  }
  
  p {
    color: #333;
    font-family: 'Varela Round', sans-serif;
    font-size: 18px;
  }
  
  footer {
    background-color: #DBE9EE;
    text-align: center;
  }
  
  .welcome {
    background-color: #DBE9EE;
    box-sizing: border-box;
    padding: 40px;
    text-align: center;
    width: 100%;
  }
  
  .question {
    text-align: center;
  }
  
  .answer {
    border: 1px solid #466995;
    margin: 20px;
  }
  
  .answer:hover {
    background: #C0D6DF;
    color: #FFF;
  }